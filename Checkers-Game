import java.util.Scanner;

public class Main {
    public static void main(String[] args) {

        System.out.println();
        CheckersGame game = new CheckersGame();
        Scanner scanner = new Scanner(System.in);

        // Keeps the game running until end factors occur
        while (!game.isGameOver()) {

            // Calls for game bit board display
            game.displayBitBoard();

            System.out.println();
            System.out.println("Make move form start position 1 to 2 (Row 1, Col 1, Row 2, Col 2): ");
            int startRow = scanner.nextInt();
            int startCol = scanner.nextInt();
            int endRow = scanner.nextInt();
            int endCol = scanner.nextInt();

            if (game.move(startRow, startCol, endRow, endCol)) {
                System.out.println("Player Has Moved");
            } else {
                System.out.println("Invalid move, try again.");
            }
        }

        System.out.println("Game Over");
    }
}




public class CheckersGame {
    private long[] pieces; // Index 0: Player 1 normal, 1: Player 1 kings, 2: Player 2 normal, 3: Player 2 kings
    private boolean isPlayer1Turn;

    public CheckersGame() {
        pieces = new long[4]; // Array for pieces and kings for both players
        initializeBoard();
        isPlayer1Turn = true;
    }

    private void initializeBoard() {
        pieces[0] = 0xFFF; // Player 1 pieces
        pieces[1] = 0L; // Player 1 kings
        pieces[2] = 0xFFF0000000000000L; // Player 2 pieces
        pieces[3] = 0L; // Player 2 kings
    }

    public void displayBitBoard() {

        // Explains to the user what each variable on the board represents.
        System.out.println("Player 1 Is W, kings Are WK");
        System.out.println("Player 2 Is B, kings Are BK");
        System.out.println();
        System.out.println(" 0 1 2 3 4 5 6 7");

        // Used for the display of the bit Board
        for (int row = 0; row < 8; row++) {
            System.out.print(row + " ");
            for (int col = 0; col < 8; col++) {
                int position = row * 8 + col;
                long mask = 1L << position;

                if ((pieces[0] & mask) != 0) {
                    System.out.print("W ");
                } else if ((pieces[1] & mask) != 0) {
                    System.out.print("WK ");
                } else if ((pieces[2] & mask) != 0) {
                    System.out.print("B ");
                } else if ((pieces[3] & mask) != 0) {
                    System.out.print("Bk ");
                } else {
                    System.out.print(". ");
                }
            }
            System.out.println();
        }
    }


// Utilities of the Bit Board 

    // Call function to allow for the pieces to be moved on the bit board
    public boolean move(int Row1, int Col1, int Row2, int Col2) {
        int startPos = Row1 * 8 + Col1;
        int endPos = Row2 * 8 + Col2;

        long startMask = 1L << startPos;
        long endMask = 1L << endPos;

        // Check if move can be made
        if (!isMoveValid(Row1, Col1, Row2, Col2)) {
            System.out.println("Invalid move");
            return false;
        }

        int currentPlayerIndex = isPlayer1Turn ? 0 : 2;
        int kingIndex = currentPlayerIndex + 1;

        // Piece movement
        if ((pieces[currentPlayerIndex] & startMask) != 0) {
            pieces[currentPlayerIndex] &= ~startMask;// Remove from start

            pieces[currentPlayerIndex] |= endMask;// Place at end

        } else if ((pieces[kingIndex] & startMask) != 0) {
            pieces[kingIndex] &= ~startMask;
            pieces[kingIndex] |= endMask;
        }

        // Capture of piece
        if (Math.abs(Row1 - Row2) == 2) {
            handleCapture(Row1, Col1, Row2, Col2);
        }

        // Promotion to king
        if (isPlayer1Turn && Row2 == 7) {
            promoteToKing(0, 1, endMask);
        } else if (!isPlayer1Turn && Row2 == 0) {
            promoteToKing(2, 3, endMask);
        }

        isPlayer1Turn = !isPlayer1Turn;
        return true;
    }

    private void handleCapture(int startRow, int startCol, int endRow, int endCol) {
        int captureRow = (startRow + endRow) / 2;
        int captureCol = (startCol + endCol) / 2;
        int capturePos = captureRow * 8 + captureCol;
        long captureMask = 1L << capturePos;

        int opponentPiecesIndex = isPlayer1Turn ? 2 : 0;
        int opponentKingsIndex = opponentPiecesIndex + 1;

        // Remove captured piece
        pieces[opponentPiecesIndex] &= ~captureMask;
        pieces[opponentKingsIndex] &= ~captureMask;
    }

    private void promoteToKing(int normalIndex, int kingIndex, long endMask) {
        pieces[normalIndex] &= ~endMask; // Remove from normal pieces
        pieces[kingIndex] |= endMask; // Promote to king
    }

    private boolean isMoveValid(int startRow, int startCol, int endRow, int endCol) {
        int startPos = startRow * 8 + startCol;
        long startMask = 1L << startPos;

        int currentPlayerIndex = isPlayer1Turn ? 0 : 2;
        int opponentIndex = isPlayer1Turn ? 2 : 0;

        // Check if correct player's piece is moved
        if ((pieces[currentPlayerIndex] & startMask) == 0 && (pieces[currentPlayerIndex + 1] & startMask) == 0) {
            return false;
        }

        int endPos = endRow * 8 + endCol;
        long endMask = 1L << endPos;

        // Check if destination is empty
        for (long piece : pieces) {
            if ((piece & endMask) != 0) {
                return false;
            }
        }

        // Movement for normal pieces
        if (isPlayer1Turn && endRow - startRow == 1 && Math.abs(endCol - startCol) == 1) {
            return true;
        } else if (!isPlayer1Turn && startRow - endRow == 1 && Math.abs(startCol - endCol) == 1) {
            return true;
        }

        // Capture validation
        if (Math.abs(startRow - endRow) == 2 && Math.abs(startCol - endCol) == 2) {
            return isCaptureValid(startRow, startCol, endRow, endCol);
        }

        return false;
    }

    private boolean isCaptureValid(int startRow, int startCol, int endRow, int endCol) {
        int captureRow = (startRow + endRow) / 2;
        int captureCol = (startCol + endCol) / 2;
        int capturePos = captureRow * 8 + captureCol;
        long captureMask = 1L << capturePos;

        int opponentPiecesIndex = isPlayer1Turn ? 2 : 0;
        int opponentKingsIndex = opponentPiecesIndex + 1;

        return (pieces[opponentPiecesIndex] & captureMask) != 0 || (pieces[opponentKingsIndex] & captureMask) != 0;
    }

    public boolean isGameOver() {
        return (pieces[0] | pieces[1]) == 0 || (pieces[2] | pieces[3]) == 0;
    }


}
